#!/bin/bash

set -u
set -e
set -x

# When these variables are set, they indicate a need for an action in the exit trap.
LOOP_BLOCK_DEV=''
CONFIG_MOUNTPOINT=''

function exit_trap
{
    if [ -n "${CONFIG_MOUNTPOINT}" ]
    then
        sudo umount --verbose "${CONFIG_MOUNTPOINT}" || echo "Failed to unmount config mountpoint."
        sudo rm --verbose -rf "${CONFIG_MOUNTPOINT}" || echo "Failed to delete config mountpoint."
    fi

    # Delete loop block device before exiting.
    if [ -n "${LOOP_BLOCK_DEV}" ]
    then
        sudo losetup -d "${LOOP_BLOCK_DEV}" || echo "Failed to delete loop device."
    fi
}

trap exit_trap EXIT

# Ask the user to select an image generated by the OpenWrt build system
echo "Select a valid rpi4 OpenWrt factory image from the following list:"
select IMAGE_FILE in $(find ./bin -name '*bcm27xx-bcm2711-rpi-4-squashfs-factory.img.gz')
do
    IMAGE_GZ_PATH="$(realpath "${IMAGE_FILE}")"
    IMAGE_GZ_DIRNAME="$(dirname "${IMAGE_GZ_PATH}")"
    IMAGE_GZ_BASENAME="$(basename "${IMAGE_GZ_PATH}")"
    IMAGE_IMG_BASENAME="${IMAGE_GZ_BASENAME%.gz}"
    IMAGE_SYSUPGRADE_GZ_PATH="${IMAGE_GZ_DIRNAME}/${IMAGE_IMG_BASENAME%-factory.img}-sysupgrade.img.gz"
    break
done

# move to the working folder
cd ./ReleaseImage

# copy the SD card image here
cp -v "${IMAGE_GZ_PATH}" .

# extract the SD card image
gunzip "${IMAGE_GZ_BASENAME}"

# append ~1200MB of zeros to the SD card image
dd if=/dev/null "of=${IMAGE_IMG_BASENAME}" bs=1 count=1 seek=250M

# prep the loop device for the SD card image
LOOP_BLOCK_DEV="$(losetup -f)"
sudo losetup --partscan --find --show "${IMAGE_IMG_BASENAME}"

# Get the partition table information
PART_INFO_JSON="$(sudo sfdisk --json "${LOOP_BLOCK_DEV}")"
SECTOR_SIZE="$(echo "${PART_INFO_JSON}" | jq '.partitiontable.sectorsize')"
MEBIBYTE_SECT="$(((1024**2)/SECTOR_SIZE))"
JSON_LASTPART="$(echo "${PART_INFO_JSON}" | jq ".partitiontable.partitions[] | select(.node==\"${LOOP_BLOCK_DEV}p2\")")"
LASTPART_STARTSECT="$(echo "${JSON_LASTPART}" | jq '.start')"
LASTPART_SIZESECT="$(echo "${JSON_LASTPART}" | jq '.size')"

# Plan the partition location for the config partition
CONFIGPART_STARTSECT="$((LASTPART_STARTSECT + LASTPART_SIZESECT + (MEBIBYTE_SECT*4)))"
CONFIGPART_SIZESECT="$((16 * MEBIBYTE_SECT))"

# Plan the partition location for the data partition
DATAPART_STARTSECT="$((CONFIGPART_STARTSECT + CONFIGPART_SIZESECT + (MEBIBYTE_SECT*4)))"
DATAPART_SIZESECT="$((16 * MEBIBYTE_SECT))"

# Create the config partition at the end of the disk
echo "${CONFIGPART_STARTSECT}, ${CONFIGPART_SIZESECT}, 83, -" | sudo sfdisk --append "${LOOP_BLOCK_DEV}"

# Create the data partition at the end of the disk
echo "${DATAPART_STARTSECT}, ${DATAPART_SIZESECT}, 07, -" | sudo sfdisk --append "${LOOP_BLOCK_DEV}"

# Create an ext4 (Only Linux readable) partition on the persistant config (third) partition
sudo mkfs.ext4 -L 'config' "${LOOP_BLOCK_DEV}p3"

# create an exfat (Windows readable) partition in the data partition (fourth)
sudo mkfs.exfat -n 'data' "${LOOP_BLOCK_DEV}p4"

# Mount the config partition and copy a default file into it
# TODO: Deal with mountpoint in exit trap
CONFIG_MOUNTPOINT='./mnt_config'
mkdir "${CONFIG_MOUNTPOINT}"
sudo mount "${LOOP_BLOCK_DEV}p3" "${CONFIG_MOUNTPOINT}"
sudo mkdir -pv "${CONFIG_MOUNTPOINT}/etc/config/"
sudo cp -v ./launchbox.config "${CONFIG_MOUNTPOINT}/etc/config/launchbox"

# Rename the image file into something consistent:
DATE_STRING="$(date +'%Y%m%d_%H%M%S')"
mv -v "${IMAGE_IMG_BASENAME}" "LaunchBoxSdCard_${DATE_STRING}.img"
cp -v "${IMAGE_SYSUPGRADE_GZ_PATH}" "LaunchBoxUpgrade_${DATE_STRING}.icu"
